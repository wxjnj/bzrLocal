<?php

/**
 * FileTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FileTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object FileTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('File');
    }
//     public function getPager($page){
    
//     	$q =  $this->createQuery('f')
//     	->select('f.id,f.token,f.title,f.sub_description,f.keywords,f.price,f.is_security,f.created_at,c.name as cname,u.nick_name as uname')
//     	->leftJoin('f.Category c')
//     	->leftJoin('f.User u')
//     	->orderBy('f.created_at desc');
    
//     	$pager = new sfDoctrinePager ( 'File',  sfConfig::get('app_max_list_page',30));
//     	$pager->setQuery ( $q );
//     	$pager->setPage ( $page );
//     	$pager->init ();
    
//     	return $pager;
    
//     }
    public function getPager($page, $_array = array()){
    
    	$q =  $this->createQuery('f')
    	->select('f.id,f.token,f.title,f.sub_description,f.keywords,f.price,f.is_security,f.created_at,c.name as cname,u.nick_name as uname')
    	->leftJoin('f.Category c')
    	->leftJoin('f.User u')
    	->orderBy('f.created_at desc');
    	 
    	if (count($_array) > 0) {
    		if (isset($_array['keywords'])) {
    			$q->andWhere("f.title like ? or f.keywords like ?", array('%'.$_array['keywords'].'%', '%'.$_array['keywords'].'%'));
    		}
    		if (isset($_array['category_id'])) {
    			$q->andWhere('f.category_id = ?', $_array['category_id']);
    		}
    		if (isset($_array['is_rank'])) {
    			$q->andWhere('f.is_rank = ?', $_array['is_rank']);
    		}
    	}
    
    	$pager = new sfDoctrinePager ( 'File',  sfConfig::get('app_max_list_page',30));
    	$pager->setQuery ( $q );
    	$pager->setPage ( $page );
    	$pager->init ();
    
    	return $pager;
    
    }
    
    public function getMyPager($page){
    
    	$user = sfContext::getInstance()->getUser()->getGuardUser()->getId();
    	$q =  $this->createQuery('f')
    	->select('f.id,f.token,f.title,f.sub_description,f.keywords,f.price,f.is_security,f.created_at,c.name as cname')
    	->leftJoin('f.Category c')
    	->leftJoin('f.User u')
    	->where('f.user_id = ?',$user)
    	->orderBy('f.created_at desc');
    
    	$pager = new sfDoctrinePager ( 'File',  sfConfig::get('app_max_question_list_page',30));
    	$pager->setQuery ( $q );
    	$pager->setPage ( $page );
    	$pager->init ();
    
    	return $pager;
    
    }
    //取指定文件内容（终生学习分类）
    public function getTypeFiles($category_id,$limit){
    
    	$q =  $this->createQuery('f')
    	->select('f.id,f.token,f.title,f.is_security,f.created_at')
    	->where('f.is_security = 0')
    	->andWhere('f.category_id = ?',$category_id)
    	->orderBy('f.created_at desc')
    	->limit($limit);
    
    	return $q->execute();
    }
    public function getNum(){
    
    	$q =  $this->createQuery('f')
    	->count();
    
    	return $q;
    }
    public function getHotList($limit){
    
    	$q =  $this->createQuery('f')
    	->select('f.id,f.token,f.title,f.is_security,f.created_at,c.name as cname')
    	->leftJoin('f.Category c')
    	->where('f.is_security = 0')
    	->orderBy('f.read_num desc,f.created_at desc')
    	->limit($limit);
    
    	return $q->execute();
    }
    //取首页终身学习资料
    public function getList($limit,$category_id){
    
    	$q =  $this->createQuery('f')
    	->select('f.id,f.token,f.title,f.picture,f.is_security,f.created_at')
    	->where('f.is_security = 0')
    	->andWhere('f.is_rank = 1')
    	->andWhere('f.category_id = ?',$category_id)
    	->orderBy('f.created_at desc')
    	->limit($limit);
    
    	return $q->execute();
    }
    //取分享动态
    public function getShareList($limit){
    	$q =  $this->createQuery('f')
    	->select('f.id,f.category_id,f.created_at,u.nick_name as uname')
    	->leftJoin('f.User u')
    	->orderBy('f.created_at desc')
    	->limit($limit);
    	
    	return $q->execute();
    }
}